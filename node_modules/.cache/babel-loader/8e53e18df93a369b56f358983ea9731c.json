{"ast":null,"code":"var _jsxFileName = \"/Users/jayaramnair/Desktop/Github Repos/react_typescript_calculator/src/components/Button.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n//Button is a functional component which deals with buttonProps\nconst Button = _ref => {\n  let {\n    button,\n    setOperations,\n    operations,\n    setClick,\n    click,\n    intermediate,\n    setIntermediate\n  } = _ref;\n\n  const performCalculations = clicked => {\n    //Check if the number clicked is a number or decimal\n    if (!isNaN(parseInt(clicked)) || clicked === \".\") {\n      //if the first number is not received yet, then keep adding to it\n      if (!intermediate.firstNumberReceived) {\n        let newFirst = intermediate.firstNumber + clicked;\n        setIntermediate({ ...intermediate,\n          firstNumber: newFirst\n        }); //Check if the second number is received or not})\n        //intermediate.firstNumber = intermediate.firstNumber + clicked\n        //Check if the second number is received or not\n      } else if (!intermediate.secondNumberReceived) {\n        let newSecond = intermediate.secondNumber + clicked;\n        setIntermediate({ ...intermediate,\n          secondNumber: newSecond\n        }); //intermediate.secondNumber = intermediate.secondNumber + clicked\n      } //Check for negative sign for the first number\n\n    } else if (clicked === \"-\" && intermediate.firstNumber === \"\") {\n      setIntermediate({ ...intermediate,\n        firstNumber: clicked\n      }); //intermediate.firstNumber = clicked\n      // Check for negative sign for the second number\n    } else if (clicked === \"-\" && intermediate.secondNumber === \"\" && intermediate.operatorReceived) {\n      setIntermediate({ ...intermediate,\n        secondNumber: clicked\n      }); //intermediate.secondNumber = clicked\n      //If the button clicked is an operator\n    } else if (clicked === \"+\" || clicked === \"-\" || clicked === \"x\" || clicked === \"/\") {\n      //If the operator has not been already received\n      if (!intermediate.operatorReceived) {\n        setIntermediate({ ...intermediate,\n          operator: clicked,\n          firstNumberReceived: true,\n          operatorReceived: true\n        }); //intermediate.operator = clicked\n        //intermediate.firstNumberReceived = true\n        //intermediate.operatorReceived = true\n        //if the operator has already been received but the second Number is still not set then consider the recently entered operator\n      } else if (intermediate.secondNumber === \"\") {\n        setIntermediate({ ...intermediate,\n          operator: clicked\n        }); //intermediate.operator = clicked\n        //Once the operator has been received then flip the boolean for secondNumberReceived so that calculation can proceed\n      } else {\n        setIntermediate({ ...intermediate,\n          secondNumberReceived: true\n        }); //intermediate.secondNumberReceived = true\n      } //Check for the equal sign being clicked\n\n    } else if (clicked === \"=\" && intermediate.firstNumberReceived && intermediate.operatorReceived && intermediate.secondNumber !== \"\") {\n      console.log(intermediate);\n      setIntermediate({ ...intermediate,\n        secondNumberReceived: true\n      }); //intermediate.secondNumberReceived = true\n    }\n\n    if (intermediate.firstNumberReceived && intermediate.secondNumberReceived && intermediate.operatorReceived) {\n      switch (intermediate.operator) {\n        case \"+\":\n          setClick(String((parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber)).toFixed(4)));\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber));\n          break;\n\n        case \"-\":\n          setClick(String((parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber)).toFixed(4)));\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber));\n          break;\n\n        case \"/\":\n          setClick(String((parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber)).toFixed(4)));\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber));\n          break;\n\n        case \"x\":\n          setClick(String((parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber)).toFixed(4)));\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber));\n          break;\n      }\n\n      console.log(intermediate);\n      intermediate.firstNumberReceived = true;\n\n      if (clicked !== \"=\") {\n        intermediate.operatorReceived = true;\n        intermediate.operator = clicked;\n      } else {\n        intermediate.operatorReceived = false;\n        intermediate.operator = \"\";\n      }\n\n      intermediate.secondNumber = \"\";\n      intermediate.secondNumberReceived = false;\n      return;\n    }\n\n    console.log(intermediate);\n    return;\n  };\n\n  const clickHandlerFunction = event => {\n    event.preventDefault(); //Check if the first button in a sequence of opearations is invalid or not\n\n    if (operations.length === 0 && (button === 'x' || button === \"/\")) {\n      setOperations([]); //Set the array to be an empty array if the operations are invalid\n\n      setClick(\"0\");\n      console.log(operations);\n      return;\n    } //Clear the results\n\n\n    if (button === 'AC') {\n      setClick(\"0\");\n      setOperations([]);\n      setIntermediate({ ...intermediate,\n        firstNumber: \"\",\n        secondNumber: \"\",\n        firstNumberReceived: false,\n        secondNumberReceived: false,\n        operator: \"\",\n        operatorReceived: false\n      });\n      return;\n    }\n\n    setOperations([...operations, button]);\n    performCalculations(button);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `button button-${button}`,\n    onClick: clickHandlerFunction,\n    children: button\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/jayaramnair/Desktop/Github Repos/react_typescript_calculator/src/components/Button.tsx"],"names":["React","Button","button","setOperations","operations","setClick","click","intermediate","setIntermediate","performCalculations","clicked","isNaN","parseInt","firstNumberReceived","newFirst","firstNumber","secondNumberReceived","newSecond","secondNumber","operatorReceived","operator","console","log","String","parseFloat","toFixed","clickHandlerFunction","event","preventDefault","length"],"mappings":"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","sourcesContent":["import { setUncaughtExceptionCaptureCallback } from 'node:process';\nimport React from 'react';\n\ninterface buttonProps {\n  button : string\n  click: string\n  key : number\n  operations: string[]\n  intermediate: {\n    firstNumberReceived: boolean,\n    firstNumber : string,\n    secondNumberReceived: boolean,\n    secondNumber: string,\n    operatorReceived: boolean,\n    operator: string\n  }\n  setIntermediate: React.Dispatch<React.SetStateAction<{\n    firstNumberReceived: boolean,\n    firstNumber : string,\n    secondNumberReceived: boolean,\n    secondNumber: string,\n    operatorReceived: boolean,\n    operator: string}>>\n\n  setClick: React.Dispatch<React.SetStateAction<string>>\n  setOperations: React.Dispatch<React.SetStateAction<string[]>>\n}\n\n\n\n//Button is a functional component which deals with buttonProps\nconst Button: React.FC<buttonProps> = ({button, setOperations, operations, setClick, click, intermediate, setIntermediate}) => {\n\n  const performCalculations = (clicked: string) => {\n    //Check if the number clicked is a number or decimal\n    if(!isNaN(parseInt(clicked)) || clicked === \".\") {\n      //if the first number is not received yet, then keep adding to it\n      if(!intermediate.firstNumberReceived) {\n        let newFirst = intermediate.firstNumber + clicked\n        setIntermediate({...intermediate, firstNumber : newFirst})\n        //Check if the second number is received or not})\n        //intermediate.firstNumber = intermediate.firstNumber + clicked\n      //Check if the second number is received or not\n      } else if (!intermediate.secondNumberReceived) {\n        let newSecond = intermediate.secondNumber + clicked\n        setIntermediate({...intermediate, secondNumber: newSecond})\n        //intermediate.secondNumber = intermediate.secondNumber + clicked\n      } //Check for negative sign for the first number\n    } else if (clicked === \"-\" && intermediate.firstNumber === \"\") {\n      setIntermediate({...intermediate, firstNumber: clicked})\n      //intermediate.firstNumber = clicked\n      // Check for negative sign for the second number\n    } else if (clicked === \"-\" && intermediate.secondNumber === \"\" && intermediate.operatorReceived) {\n      setIntermediate({...intermediate, secondNumber: clicked})\n      //intermediate.secondNumber = clicked\n      //If the button clicked is an operator\n    } else if (clicked === \"+\" || clicked === \"-\" || clicked === \"x\" || clicked === \"/\") {\n      //If the operator has not been already received\n      if(!intermediate.operatorReceived) {\n        setIntermediate({...intermediate, operator: clicked, firstNumberReceived: true, operatorReceived: true})\n        //intermediate.operator = clicked\n        //intermediate.firstNumberReceived = true\n        //intermediate.operatorReceived = true\n        //if the operator has already been received but the second Number is still not set then consider the recently entered operator\n      }  else if (intermediate.secondNumber === \"\") {\n        setIntermediate({...intermediate, operator: clicked})\n        //intermediate.operator = clicked\n        //Once the operator has been received then flip the boolean for secondNumberReceived so that calculation can proceed\n      } else {\n        setIntermediate({...intermediate, secondNumberReceived: true})\n        //intermediate.secondNumberReceived = true\n      } //Check for the equal sign being clicked\n    } else if (clicked === \"=\" && intermediate.firstNumberReceived && intermediate.operatorReceived && intermediate.secondNumber !== \"\") {\n      console.log(intermediate)\n      setIntermediate({...intermediate, secondNumberReceived: true})\n      //intermediate.secondNumberReceived = true\n    }\n\n    if(intermediate.firstNumberReceived && intermediate.secondNumberReceived && intermediate.operatorReceived) {\n      switch(intermediate.operator) {\n        case \"+\":\n          setClick(String((parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber)).toFixed(4)))\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber))\n          break\n        case \"-\":\n          setClick(String((parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber)).toFixed(4)))\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber))\n          break\n        case \"/\":\n          setClick(String((parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber)).toFixed(4)))\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber))\n          break\n        case \"x\": \n          setClick(String((parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber)).toFixed(4)))\n          intermediate.firstNumber = String(parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber))\n          break\n      }\n      console.log(intermediate)\n      intermediate.firstNumberReceived = true\n      if(clicked !== \"=\") {\n        intermediate.operatorReceived = true\n        intermediate.operator = clicked\n      } else {\n        intermediate.operatorReceived = false\n        intermediate.operator = \"\"\n      }\n      intermediate.secondNumber = \"\"\n      intermediate.secondNumberReceived = false\n      return \n    }\n    console.log(intermediate)\n    return \n  }\n\n  const clickHandlerFunction = (event: React.MouseEvent<HTMLDivElement, MouseEvent>)=> {\n\n    event.preventDefault();\n\n    //Check if the first button in a sequence of opearations is invalid or not\n    if(operations.length === 0 && (button === 'x' || button === \"/\")) {\n      setOperations([]) //Set the array to be an empty array if the operations are invalid\n      setClick(\"0\")\n      console.log(operations)\n      return  \n    }\n\n    //Clear the results\n    if (button === 'AC') {\n      setClick(\"0\")\n      setOperations([])\n      setIntermediate({...intermediate, \n        firstNumber: \"\", \n        secondNumber: \"\", \n        firstNumberReceived: false, \n        secondNumberReceived: false, \n        operator: \"\",\n        operatorReceived: false,\n      })\n      return \n    }\n\n    setOperations([...operations, button])\n    performCalculations(button)\n  }\n  return (\n    <div className ={`button button-${button}`} onClick={clickHandlerFunction}>\n      {button}\n    </div>\n  )\n}\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}