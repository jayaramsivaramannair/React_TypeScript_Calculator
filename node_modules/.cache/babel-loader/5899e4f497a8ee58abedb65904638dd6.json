{"ast":null,"code":"var _jsxFileName = \"/Users/jayaramnair/Desktop/Github Repos/react_typescript_calculator/src/components/Button.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n//Button is a functional component which deals with buttonProps\nconst Button = _ref => {\n  let {\n    button,\n    setOperations,\n    operations,\n    setClick,\n    click,\n    intermediate,\n    setIntermediate\n  } = _ref;\n\n  const performCalculations = clicked => {\n    //Check if the number clicked is a number or not\n    if (!isNaN(parseInt(clicked))) {\n      //if the first number is not received yet, then keep adding to it\n      if (!intermediate.firstNumberReceived) {\n        intermediate.firstNumber = intermediate.firstNumber + clicked; //Check if the second number is received or not\n      } else if (!intermediate.secondNumberReceived) {\n        intermediate.secondNumber = intermediate.secondNumber + clicked;\n      } //If the button clicked is an operator\n\n    } else if (clicked === \"+\" || clicked === \"-\" || clicked === \"*\" || clicked === \"/\") {\n      //If the operator has not been already received\n      if (!intermediate.operatorReceived) {\n        intermediate.operator = clicked;\n        intermediate.firstNumberReceived = true;\n        intermediate.operatorReceived = true; //if the operator has already been received\n      } else {\n        intermediate.secondNumberReceived = true;\n      }\n    }\n\n    if (intermediate.firstNumberReceived && intermediate.secondNumberReceived && intermediate.operatorReceived) {\n      switch (intermediate.operator) {\n        case \"+\":\n          setClick(String(parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber)));\n          break;\n\n        case \"-\":\n          setClick(String(parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber)));\n          break;\n\n        case \"/\":\n          setClick(String(parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber)));\n          break;\n\n        case \"x\":\n          setClick(String(parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber)));\n          break;\n      }\n\n      intermediate.firstNumber = click;\n      intermediate.operator = clicked;\n      intermediate.secondNumber = \"\";\n    }\n\n    return;\n  };\n\n  const clickHandlerFunction = event => {\n    event.preventDefault(); //Check if the first button in a sequence of opearations is invalid or not\n\n    if (operations[0] === \"/\" || operations[0] === \"x\") {\n      setOperations([]); //Set the array to be an empty array if the operations are invalid\n\n      setClick(\"0\");\n      return;\n    } //Clear the results\n\n\n    if (button === 'AC') {\n      setClick(\"0\");\n      setOperations([]);\n      return;\n    }\n\n    setOperations([...operations, button]);\n    setClick(button);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `button button-${button}`,\n    onClick: clickHandlerFunction,\n    children: button\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/jayaramnair/Desktop/Github Repos/react_typescript_calculator/src/components/Button.tsx"],"names":["React","Button","button","setOperations","operations","setClick","click","intermediate","setIntermediate","performCalculations","clicked","isNaN","parseInt","firstNumberReceived","firstNumber","secondNumberReceived","secondNumber","operatorReceived","operator","String","parseFloat","clickHandlerFunction","event","preventDefault"],"mappings":"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","sourcesContent":["import { setUncaughtExceptionCaptureCallback } from 'node:process';\nimport React from 'react';\n\ninterface buttonProps {\n  button : string\n  click: string\n  key : number\n  operations: string[]\n  intermediate: {\n    firstNumberReceived: boolean,\n    firstNumber : string,\n    secondNumberReceived: boolean,\n    secondNumber: string,\n    operatorReceived: boolean,\n    operator: string\n  }\n\n  setIntermediate: React.Dispatch<React.SetStateAction<{\n    firstNumberReceived: boolean,\n    firstNumber : string,\n    secondNumberReceived: boolean,\n    secondNumber: string,\n    operatorReceived: boolean,\n    operator: string}>>\n\n  setClick: React.Dispatch<React.SetStateAction<string>>\n  setOperations: React.Dispatch<React.SetStateAction<string[]>>\n}\n\n\n\n//Button is a functional component which deals with buttonProps\nconst Button: React.FC<buttonProps> = ({button, setOperations, operations, setClick, click, intermediate, setIntermediate}) => {\n\n  const performCalculations = (clicked: string) => {\n    //Check if the number clicked is a number or not\n    if(!isNaN(parseInt(clicked))) {\n      //if the first number is not received yet, then keep adding to it\n      if(!intermediate.firstNumberReceived) {\n        intermediate.firstNumber = intermediate.firstNumber + clicked \n      //Check if the second number is received or not\n      } else if (!intermediate.secondNumberReceived) {\n        intermediate.secondNumber = intermediate.secondNumber + clicked\n      }\n    //If the button clicked is an operator\n    } else if (clicked === \"+\" || clicked === \"-\" || clicked === \"*\" || clicked === \"/\") {\n      //If the operator has not been already received\n      if(!intermediate.operatorReceived) {\n        intermediate.operator = clicked\n        intermediate.firstNumberReceived = true\n        intermediate.operatorReceived = true\n        //if the operator has already been received\n      } else {\n        intermediate.secondNumberReceived = true\n      }\n    }\n\n    if(intermediate.firstNumberReceived && intermediate.secondNumberReceived && intermediate.operatorReceived) {\n      switch(intermediate.operator) {\n        case \"+\":\n          setClick(String(parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber)))\n          break\n        case \"-\":\n          setClick(String(parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber)))\n          break\n        case \"/\":\n          setClick(String(parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber)))\n          break\n        case \"x\": \n          setClick(String(parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber)))\n          break\n      }\n\n      intermediate.firstNumber = click\n      intermediate.operator = clicked\n      intermediate.secondNumber = \"\"\n    }\n\n    return\n  }\n\n  const clickHandlerFunction = (event: React.MouseEvent<HTMLDivElement, MouseEvent>)=> {\n\n    event.preventDefault();\n\n    //Check if the first button in a sequence of opearations is invalid or not\n    if(operations[0] === \"/\" || operations[0] === \"x\") {\n      setOperations([]) //Set the array to be an empty array if the operations are invalid\n      setClick(\"0\")\n      return  \n    }\n\n    //Clear the results\n    if (button === 'AC') {\n      setClick(\"0\")\n      setOperations([])\n      return \n    }\n\n    setOperations([...operations, button])\n    setClick(button)\n  }\n  return (\n    <div className ={`button button-${button}`} onClick={clickHandlerFunction}>\n      {button}\n    </div>\n  )\n}\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}