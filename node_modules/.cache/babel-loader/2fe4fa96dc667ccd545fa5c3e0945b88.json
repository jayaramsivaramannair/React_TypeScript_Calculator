{"ast":null,"code":"var _jsxFileName = \"/Users/jayaramnair/Desktop/Github Repos/react_typescript_calculator/src/components/Button.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n//Button is a functional component which deals with buttonProps\nconst Button = _ref => {\n  let {\n    button,\n    setOperations,\n    operations,\n    setClick,\n    click,\n    intermediate,\n    setIntermediate\n  } = _ref;\n\n  const performCalculations = clicked => {\n    //Check if the number clicked is a number or decimal\n    if (!isNaN(parseInt(clicked)) || clicked === \".\") {\n      //if the first number is not received yet, then keep adding to it\n      if (!intermediate.firstNumberReceived) {\n        let newNumber = intermediate.firstNumber + clicked;\n        setIntermediate({ ...intermediate,\n          firstNumber: newNumber\n        }); //Check if the second number is received or not\n      } else if (!intermediate.secondNumberReceived) {\n        let newNumber = intermediate.secondNumber + clicked;\n        setIntermediate({ ...intermediate,\n          secondNumber: newNumber\n        });\n      } //Check for negative sign for the first number\n\n    } else if (clicked === \"-\" && intermediate.firstNumber === \"\") {\n      setIntermediate({ ...intermediate,\n        firstNumber: clicked\n      }); // Check for negative sign for the second number\n    } else if (clicked === \"-\" && intermediate.secondNumber === \"\" && intermediate.operatorReceived) {\n      setIntermediate({ ...intermediate,\n        secondNumber: clicked\n      }); //If the button clicked is an operator\n    } else if (clicked === \"+\" || clicked === \"-\" || clicked === \"x\" || clicked === \"/\") {\n      //If the operator has not been already received\n      if (!intermediate.operatorReceived) {\n        setIntermediate({ ...intermediate,\n          operator: clicked,\n          firstNumberReceived: true,\n          operatorReceived: true\n        }); //if the operator has already been received\n      } else {\n        setIntermediate({ ...intermediate,\n          secondNumberReceived: true\n        });\n      }\n    }\n\n    if (intermediate.firstNumberReceived && intermediate.secondNumberReceived && intermediate.operatorReceived) {\n      switch (intermediate.operator) {\n        case \"+\":\n          setClick(String((parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber)).toFixed(4)));\n          setIntermediate({ ...intermediate,\n            firstNumber: String(parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber))\n          });\n          break;\n\n        case \"-\":\n          setClick(String((parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber)).toFixed(4)));\n          setIntermediate({ ...intermediate,\n            firstNumber: String(parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber))\n          });\n          break;\n\n        case \"/\":\n          setClick(String((parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber)).toFixed(4)));\n          setIntermediate({ ...intermediate,\n            firstNumber: String(parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber))\n          });\n          break;\n\n        case \"x\":\n          setClick(String((parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber)).toFixed(4)));\n          setIntermediate({ ...intermediate,\n            firstNumber: String(parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber))\n          });\n          break;\n      }\n\n      setIntermediate({ ...intermediate,\n        firstNumberReceived: true,\n        operatorReceived: true,\n        operator: clicked,\n        secondNumber: \"\",\n        secondNumberReceived: false\n      });\n      console.log(intermediate);\n      return;\n    }\n\n    return;\n  };\n\n  const clickHandlerFunction = event => {\n    event.preventDefault(); //Check if the first button in a sequence of opearations is invalid or not\n\n    if (operations.length === 0 && (button === 'x' || button === \"/\")) {\n      setOperations([]); //Set the array to be an empty array if the operations are invalid\n\n      setClick(\"0\");\n      console.log(operations);\n      return;\n    } //Clear the results\n\n\n    if (button === 'AC') {\n      setClick(\"0\");\n      setOperations([]);\n      setIntermediate({ ...intermediate,\n        firstNumber: \"\",\n        secondNumber: \"\",\n        firstNumberReceived: false,\n        secondNumberReceived: false,\n        operator: \"\",\n        operatorReceived: false\n      });\n      return;\n    }\n\n    setOperations([...operations, button]);\n    performCalculations(button);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `button button-${button}`,\n    onClick: clickHandlerFunction,\n    children: button\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Button;\nexport default Button;\n\nvar _c;\n\n$RefreshReg$(_c, \"Button\");","map":{"version":3,"sources":["/Users/jayaramnair/Desktop/Github Repos/react_typescript_calculator/src/components/Button.tsx"],"names":["React","Button","button","setOperations","operations","setClick","click","intermediate","setIntermediate","performCalculations","clicked","isNaN","parseInt","firstNumberReceived","newNumber","firstNumber","secondNumberReceived","secondNumber","operatorReceived","operator","String","parseFloat","toFixed","console","log","clickHandlerFunction","event","preventDefault","length"],"mappings":"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","sourcesContent":["import { setUncaughtExceptionCaptureCallback } from 'node:process';\nimport React from 'react';\n\ninterface buttonProps {\n  button : string\n  click: string\n  key : number\n  operations: string[]\n  intermediate: {\n    firstNumberReceived: boolean,\n    firstNumber : string,\n    secondNumberReceived: boolean,\n    secondNumber: string,\n    operatorReceived: boolean,\n    operator: string\n  }\n  setIntermediate: React.Dispatch<React.SetStateAction<{\n    firstNumberReceived: boolean,\n    firstNumber : string,\n    secondNumberReceived: boolean,\n    secondNumber: string,\n    operatorReceived: boolean,\n    operator: string}>>\n\n  setClick: React.Dispatch<React.SetStateAction<string>>\n  setOperations: React.Dispatch<React.SetStateAction<string[]>>\n}\n\n\n\n//Button is a functional component which deals with buttonProps\nconst Button: React.FC<buttonProps> = ({button, setOperations, operations, setClick, click, intermediate, setIntermediate}) => {\n\n  const performCalculations = (clicked: string) => {\n    //Check if the number clicked is a number or decimal\n    if(!isNaN(parseInt(clicked)) || clicked === \".\") {\n      //if the first number is not received yet, then keep adding to it\n      if(!intermediate.firstNumberReceived) {\n        let newNumber = intermediate.firstNumber + clicked\n        setIntermediate({...intermediate, firstNumber: newNumber})\n      //Check if the second number is received or not\n      } else if (!intermediate.secondNumberReceived) {\n        let newNumber = intermediate.secondNumber + clicked\n        setIntermediate({...intermediate, secondNumber: newNumber})\n      } //Check for negative sign for the first number\n    } else if (clicked === \"-\" && intermediate.firstNumber === \"\") {\n      setIntermediate({...intermediate, firstNumber: clicked})\n      // Check for negative sign for the second number\n    } else if (clicked === \"-\" && intermediate.secondNumber === \"\" && intermediate.operatorReceived) {\n      setIntermediate({...intermediate, secondNumber: clicked})\n      //If the button clicked is an operator\n    } else if (clicked === \"+\" || clicked === \"-\" || clicked === \"x\" || clicked === \"/\") {\n      //If the operator has not been already received\n      if(!intermediate.operatorReceived) {\n        setIntermediate({...intermediate, operator: clicked, firstNumberReceived: true, operatorReceived: true})\n        //if the operator has already been received\n      } else {\n        setIntermediate({...intermediate, secondNumberReceived: true})\n      }\n    }\n\n    if(intermediate.firstNumberReceived && intermediate.secondNumberReceived && intermediate.operatorReceived) {\n      switch(intermediate.operator) {\n        case \"+\":\n          setClick(String((parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber)).toFixed(4)))\n          setIntermediate({...intermediate, firstNumber: String(parseFloat(intermediate.firstNumber) + parseFloat(intermediate.secondNumber))})\n          break\n        case \"-\":\n          setClick(String((parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber)).toFixed(4)))\n          setIntermediate({...intermediate, firstNumber: String(parseFloat(intermediate.firstNumber) - parseFloat(intermediate.secondNumber))})\n          break\n        case \"/\":\n          setClick(String((parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber)).toFixed(4)))\n          setIntermediate({...intermediate, firstNumber: String(parseFloat(intermediate.firstNumber) / parseFloat(intermediate.secondNumber))})\n          break\n        case \"x\": \n          setClick(String((parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber)).toFixed(4)))\n          setIntermediate({...intermediate, firstNumber: String(parseFloat(intermediate.firstNumber) * parseFloat(intermediate.secondNumber))})\n          break\n      }\n      setIntermediate({...intermediate, firstNumberReceived: true, operatorReceived: true, operator: clicked, secondNumber: \"\", secondNumberReceived: false})\n      console.log(intermediate)\n      return \n    }\n    return \n  }\n\n  const clickHandlerFunction = (event: React.MouseEvent<HTMLDivElement, MouseEvent>)=> {\n\n    event.preventDefault();\n\n    //Check if the first button in a sequence of opearations is invalid or not\n    if(operations.length === 0 && (button === 'x' || button === \"/\")) {\n      setOperations([]) //Set the array to be an empty array if the operations are invalid\n      setClick(\"0\")\n      console.log(operations)\n      return  \n    }\n\n    //Clear the results\n    if (button === 'AC') {\n      setClick(\"0\")\n      setOperations([])\n      setIntermediate({...intermediate, \n        firstNumber: \"\", \n        secondNumber: \"\", \n        firstNumberReceived: false, \n        secondNumberReceived: false, \n        operator: \"\",\n        operatorReceived: false,\n      })\n      return \n    }\n\n    setOperations([...operations, button])\n    performCalculations(button)\n  }\n  return (\n    <div className ={`button button-${button}`} onClick={clickHandlerFunction}>\n      {button}\n    </div>\n  )\n}\n\nexport default Button;"]},"metadata":{},"sourceType":"module"}